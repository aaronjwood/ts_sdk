Thingspace SDK README
----------------------

Copyright (C) 2016, 2017 Verizon. All rights reserved.

Table of contents:
-------------------
1. Overview
2. SDK capabilties
	2.1 Supported targets
	2.2 Supported transports and protocols
3. Repository layout
4. Building the SDK
	4.1 Prerequisites
	4.2 Protocol specific configurations
		4.2.1 OTT protocol
			4.2.1.1 Configuring mbedTLS
			4.2.1.2 Configuring device credentials
		4.2.2 SMSNAS protocol
	4.3 Building the SDK with the user application
	4.4 Building a static library
5. Adding a new user application
6. Generating documentation
7. Porting guide
	7.1 Porting across boards
	7.2 Porting across MCU


1. Overview
------------
This repository contains the reference implementation of the Thingspace SDK (TS
SDK) along with examples that use the SDK. The Thingspace SDK provides a set of
API routines that enable an IoT device (defined here as a microcontroller (MCU)
connected to an LTE modem) to communicate with the Thingspace IoT services.


2. SDK capabilities
--------------------
The SDK was designed to be agnostic of the target platform, the data transport
and the protocol to be used over the transport. These are configurable when
building the SDK. The SDK communicates with the modem via a serial connection
between the MCU and the modem. So far the only modem supported is the UBLOX
TOBY-L201.


2.1 Supported targets
----------------------
The following targets are supported by the SDK:
o MCU: STM32F429ZI
  Family: ARM Cortex M4
  Boards: NUCLEO-F429ZI ARM development board


2.2 Supported transports and protocols
---------------------------------------
The following data transports and protocols are supported by the SDK
o Data transport: TCP/IP
  Protocols: Over-the-top (OTT)

o Data transport: SMS over NAS
  Protocols: SMSNAS


3. Repository layout
---------------------
---------------------------------------
Top level directories:
---------------------------------------
ts_sdk/					The top level directory of the
					ThingSpace SDK repository.

ts_sdk_bldenv/				This directory exists in each Docker
					container and is the top level for all
					the files needed to perform the build
					for a chipset (i.e. the chipset SDK and
					toolchain)

---------------------------------------
Build environment directories:
---------------------------------------
ts_sdk_bldenv/toolchain (Optional) 	All files that make up the toolchain,
					if not embedded in the chipset SDK.

ts_sdk_bldenv/<chipset-name>		The chipset SDK as provided by the
					chipset vendor.

---------------------------------------
TS-SDK source repository:
---------------------------------------
ts_sdk/build/<app_name>			Created after successful build by the
					docker container to place all the
					application related object files and
					binary images which can be later used to
					upload firmware to target platform.

ts_sdk/Documents 			Contains detailed description of the SDK
					and its platform APIs.

ts_sdk/module_tests 			Contains various test programs for SDK
					components such as UART, AT layer etc.

ts_sdk/sample_apps 			Sample applications using the TS-SDK

ts_sdk/sample_apps/cc_test/src		Source code for the cc_test app

ts_sdk/sample_apps/cc_test/build	Build result directory for the cc_test
					application. All files produced by the
					build must go under here.

ts_sdk/sample_apps/<others>/src		Source code for other sample applications.

ts_sdk/tools				Any general files needed to perform the
					build process or do work in the source
					repository.

ts_sdk/tools/scripts 			Scripts to assist with building,
					configuring tools, scanning source code,
					etc.

ts_sdk/tools/config			General configuration and data files
					needed by tools.

ts_sdk/tools/docker			Dockerfiles for creating the various
					chipset build Docker containers.

ts_sdk/sdk				Source code and related files that
					provide the API and communication path
					for ThingSpace SDK.

ts_sdk/sdk/<sdk_name>/src 		SDK source code files.

ts_sdk/sdk/<sdk_name>/inc 		Header files shared across all of the
					TS SDK source files (excluding those
					that define the user API)

ts_sdk/sdk/<sdk_name>/api 		Header files consumed by the application
					in order to use the SDK.

ts_sdk/config_files       		Any configuration files which must be
					available when an application using the
					SDK is executing. The build might
					process these into a different form
					depending on the target e.g. a firmware
					image with no filesystem.

ts_sdk/sdk/<sdk_name>/vendor		Externally provided components required
					by the SDK on one or more platforms.
					Each component has a source code
					directory tree under here. Ideally we
					use the same components across all
					chipsets and OSs. Some likely components
					are shown below.

ts_sdk/sdk/<sdk_name>/vendor/<TLS library>  	TLS library (e.g. mbedtls)

ts_sdk/sdk/<sdk_name>/vendor/<MQTT library> 	MQTT library (e.g. mosquitto)

ts_sdk/sdk/<sdk_name>/vendor/<json library> 	JSON library (e.g. cJSON)

ts_sdk/platform				Files required to allow the SDK and it
					sample applications to be portable
					across multiple chipsets, OSs,
					protocols, etc.

ts_sdk/platform/drivers			Files implementing common hardware
					abstractions e.g. UART access, hardware
					RNG, timers, etc.

ts_sdk/platform/sw			Files implementing common software
					abstractions.

ts_sdk/platform/inc			Header files defining the API created by
					these abstractions.

ts_sdk/targets				Optional directory containing chipset
					sdk and other required tools


4. Building the SDK
--------------------
