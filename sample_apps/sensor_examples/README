This directory houses example firmwares that make use of the Verizon IoT
protocols (Over The Top (OTT) and SMSNAS) to communicate with the cloud.
Protocol functionalities are exposed to the users through Cloud Communication
(CC module) APIs.

Functional overview of the firmware:
------------------------------------
Each example has a sensor interface that exposes different sensors to the main
firmware in a uniform way. This allows the examples to share the code that
enables communication with the cloud. The basic flow of the firmware is as
follows:

1) Based on protocol selected it takes below routes to communicate with the
   cloud services:
   a) OTT PROTOCOL:
   Registers basic and control services with the cc module.
   Establish a secure connection with the cloud, authenticate the device and
   send a 'RESTARTED' message on boot-up thereby forcing the cloud to send the
   initial configuration down to the device. Currently, this is the polling
   interval.
   b) SMSNAS PROTOCOL:
   Registers basic and control services with the cc module. Communication with
   cloud services takes place as a SMS and it is asynchronous in nature hence no
   polling required. Cloud services/device can communicate at any time.
   Authentication and RESTARTED API calls will have no effect.

2) Read any sensors with an internal calibration table and transmit that data.

3) Read all sensors and send the readings back to the cloud. Readings from
   individual sensors are packed in different messages. All messages in a given
   iteration are sent over the same connection.

4) Wait until the next reporting interval which is set by application, or in
   case of OTT protocol wait till minimum(reporting, polling) interval as OTT
   OTT protocol requires application to poll cloud services to retrieve any
   pending update messages.

5) Wake up all sensors and repeat from step 3.

In addition to the above, the firmware also responds to an update message with
a single byte payload with the value '0x42'. This instructs the firmware to
resend calibration data of all sensors.

The firmware supports standard control messages from the cloud to:

	- Set the polling interval (Only applicable to OTT protocol)
	- Cause the device to go silent (i.e. enter airplane mode) for a
          specified interval. The interval value is printed as debug
	  output, but communications are not halted.

To convey the usage of the Cloud Communication API in the most simple way
possible,  no measures have been taken to handle connection timeouts or to
perform retries on failed transactions. All calls to the API are wrapped with
an ASSERT macro.  On the first unexpected return value, execution stops and
the blue LED on the development board flashes.


Creating a Thingspace account and registering a device (Only for OTT protocol):
-------------------------------------------------------------------------------
The cloud can be managed through the ott-client-api.sh script found in:
$PROJ_ROOT/tools/scripts/
This script must be invoked in the above directory.
Before compiling the firmwares for the first time, make sure to generate user
and application (client) tokens, followed by device credentials:

1) To generate user and application tokens for an email 'ott@verizon.com' and
   password 'Ver1z0n1234567890', invoke the client API script as follows:
     ./ott-client-api.sh account ott@verizon.com Ver1z0n1234567890

   On a successful call, this will print out the user, application and refresh
   tokens. It will also save the user and application tokens into a local file
   called '.tscreds'. As long as the file is populated with valid values, most
   of the future invocations of this script can omit the user and application
   tokens as they will be sourced from this file.

2) Device credentials can only be generated after an account is created. To
   provision an OTT device named 'mydevice' and register it with Thingspace, use
   the following command:
     ./ott-client-api.sh dev mydevice

   This will print out the QR code associated with the newly created device along
   with the device secret and device ID encoded in Base64. The script will also
   print out C compatible decoded versions of the device ID and secret. These
   values will need to be copied over existing values in:
   $PROJ_ROOT/include/dev_creds/dev_creds.h

   Make sure to note down the device ID and secret as there is no way to retrieve
   them later. Lastly, the script will print out the Thingspace device ID. This
   value will also be copied to the file '.tscreds'.
   Once steps 1 and 2 have been performed, the firmware can be compiled and burned
   on to the device.


Compiling the firmware (OTT protocol is default):
------------------------------------------------
To compile and burn the BMP180 sensor example ([] is optional):
  make clean && make upload PROJ_NAME=bmp180 [PROTOCOL=<SMSNAS_PROTOCOL>]

To compile and burn the XNUCLEO sensor board example:
  make clean && make upload PROJ_NAME=xnucleo-iks01a1 [PROTOCOL=<SMSNAS_PROTOCOL>]


Sending commands to the device and reading statuses from the cloud:
Only Applicable to OTT PROTOCOL:
-------------------------------------------------------------------

1) Commands can be sent to the device with a valid user token and a valid
   Thingspace device ID, The OTT protocol supports three types of messages to
   be sent to the device, namely:
   a) New polling interval in seconds (30 in this case), sent using:
        ./ott-client-api.sh wrpi 30

   b) New sleep interval in seconds (3600 in this case), sent using:
        ./ott-client-api.sh wrsi 3600

   c) New update message with a hexadecimal payload (0x42 in this case) of an
      appropriate length.
        ./ott-client-api.sh wrupd 42

2) Messages sent by the device to the cloud can be retrieved using the following
   command:
     ./ott-client-api.sh rdstat 4

   This will read in the last 4 status messages the device has sent to the cloud.
   In the context of the OTT examples, each status message corresponds to the
   raw sensor reading from an individual sensor, in hexadecimal.

For more information on how to use ott-client-api.sh, invoke it as follows:
  ./ott-client-api.sh help
