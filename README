Thingspace SDK README
----------------------

Copyright (C) 2017 Verizon. All rights reserved.

Table of contents:
-------------------
1. Overview
2. SDK capabilties
	2.1 Supported targets
	2.2 Supported transports and protocols
3. Repository layout
4. Thingspace account and device management
5. Building the SDK
	5.1 Protocol specific configurations
		5.1.1 OTT protocol
		5.1.2 SMSNAS protocol
	5.2 Building the SDK with the user application
	5.3 Building the SDK into a static library
6. Creating a new user application
7. Generating documentation


1. Overview
------------
This repository contains the reference implementation of the Thingspace SDK (TS
SDK) along with examples that use it. The TS SDK provides a set of API routines
that enable an IoT device (defined here as a microcontroller (MCU) connected to
an LTE modem) to communicate with the Thingspace IoT services.


2. SDK capabilities
--------------------
The SDK API was designed to be agnostic of the target platform, the data
transport and the protocol to be used over the transport. These are configurable
during the build step. The modem and the MCU communicate with each other through
a serial connection between them. So far the only modem supported is the UBLOX
TOBY-L201.


2.1 Supported targets
----------------------
The following targets are supported by the SDK:
	o MCU: STM32F429ZI
	  Family: ARM Cortex M4
	  Boards: NUCLEO-F429ZI ARM development board


2.2 Supported transports and protocols
---------------------------------------
The following data transports and protocols are supported by the SDK:
	o Data transport: TCP/IP
	  Protocols: Over-the-top (OTT)

	o Data transport: SMS over NAS
	  Protocols: SMSNAS


3. Repository layout
---------------------
---------------------------------------
Top level directories:
---------------------------------------
ts_sdk/					The top level directory of the
					ThingSpace SDK repository.

ts_sdk_bldenv/				This directory exists in each Docker
					container and is the top level for all
					the files needed to perform the build
					for a chipset (i.e. the chipset SDK and
					toolchain)

---------------------------------------
Build environment directories:
---------------------------------------
ts_sdk_bldenv/toolchain (Optional) 	All files that make up the toolchain,
					if not embedded in the chipset SDK.

ts_sdk_bldenv/<chipset-name>		The chipset SDK as provided by the
					chipset vendor.

---------------------------------------
TS-SDK source repository:
---------------------------------------
ts_sdk/build/<app_name>			Created after successful build by the
					Docker container to place all the
					application related object files and
					binary images which can be later used to
					upload firmware to target platform.

ts_sdk/Documents 			Contains detailed description of the SDK
					and its platform APIs.

ts_sdk/module_tests 			Contains various test programs for SDK
					components such as UART, AT layer etc.

ts_sdk/apps				Applications using the TS SDK

ts_sdk/apps/cc_test/src			Source code for the cc_test app

ts_sdk/apps/cc_test/build		Build result directory for the cc_test
					application. All files produced by the
					build must go under here.

ts_sdk/apps/<others>/src		Source code for other applications.

ts_sdk/apps/<others>/inc		Header files for other applications.

ts_sdk/tools				Any general files needed to perform the
					build process or do work in the source
					repository.

ts_sdk/tools/scripts 			Scripts to assist with building,
					configuring tools, scanning source code,
					etc.

ts_sdk/tools/config			General configuration and data files
					needed by tools.

ts_sdk/tools/docker			Dockerfiles for creating the various
					chipset build Docker containers.

ts_sdk/sdk				Source code and related files that
					provide the API and communication path
					for ThingSpace SDK.

ts_sdk/sdk/<sdk_name>/src 		SDK source code files.

ts_sdk/sdk/<sdk_name>/inc 		Header files shared across all of the
					TS SDK source files (excluding those
					that define the user API)

ts_sdk/sdk/<sdk_name>/api 		Header files consumed by the application
					in order to use the SDK.

ts_sdk/config_files       		Any configuration files which must be
					available when an application using the
					SDK is executing. The build might
					process these into a different form
					depending on the target e.g. a firmware
					image with no filesystem.

ts_sdk/sdk/<sdk_name>/vendor		Externally provided components required
					by the SDK on one or more platforms.
					Each component has a source code
					directory tree under here. Ideally we
					use the same components across all
					chipsets and OSs. Some likely components
					are shown below.

ts_sdk/sdk/<sdk_name>/vendor/<TLS library>  	TLS library (e.g. mbedtls)

ts_sdk/sdk/<sdk_name>/vendor/<MQTT library> 	MQTT library (e.g. mosquitto)

ts_sdk/sdk/<sdk_name>/vendor/<json library> 	JSON library (e.g. cJSON)

ts_sdk/platform				Files required to allow the SDK and it
					sample applications to be portable
					across multiple chipsets, OSs,
					protocols, etc.

ts_sdk/platform/drivers			Files implementing common hardware
					abstractions e.g. UART access, hardware
					RNG, timers, etc.

ts_sdk/platform/sw			Files implementing common software
					abstractions.

ts_sdk/platform/inc			Header files defining the API created by
					these abstractions.

ts_sdk/targets				Optional directory containing chipset
					sdk and other required tools


4. Thingspace account and device management
--------------------------------------------
The repository contains a script (thingspace-client-api.sh) to help the user
create and manage their account and create and control devices registered to
Thingspace. The script is located under ts_sdk/tools/scripts.

Usually the first step is to create an account followed by registering a device.
Account creation is a one time step. Depending on the protocol being used, a set
of device credentials may be retrieved from the cloud when creating the device.
Refer to Section 5.1.1 to see how device credentials are used to configure the
firmware.

The script can also be used to delete accounts, remove devices, send update
messages to the device, query status messages the device sends back to
Thingspace services etc. For a detailed description on using the script refer to
the script's help:
thingspace-client-api.sh help


5. Building the SDK
--------------------
By default, the TS SDK and accompanying examples are built using the ARM
embedded GCC toolchain. Details of this toolchain are as follows:
	o Version: gcc-arm-none-eabi-5_4-2016q2
	o Link to binaries: https://launchpad.net/gcc-arm-embedded/+download

To make the build process easier, a Docker container with the toolchain is
provided via Dockerhub. The actual build command is issued via scripts. For
information on how to invoke the scripts, please refer to Section 5.2.


5.1 Protocol specific configurations
-------------------------------------
Before building the firmware, certain aspects of the protocol being used will
need to be configured. The following sections briefly describe the configuration
steps for all supported protocol/transport combinations.


5.1.1 OTT protocol
-------------------
The OTT protocol has two configuration components.

Configuring mbedTLS
--------------------
There is a script added to vendor/mbedtls: vz_configure_mbedtls
It is intended to capture the changes needed to customize mbed TLS to the
minimum set of features that will allow the sample applications to communicate
with the Verizon cloud services.

The script will edit:
	vendor/mbedtls/include/mbedtls/config.h.original

to produce the desired configuration in:
	vendor/mbedtls/include/mbedtls/config.h

That version of config.h is checked into the repository.

The script currently has options to enable/disable certain library features,
which allows the library to be customized for test/experimental purposes:

$ ./vz_configure_mbedtls help
Usage:
    vz_configure_mbedtls [help] [debug] [no-net] [full-msgs] [no-hwrng]

debug     - will enable debug messages in the library, especially for TLS
	    errors. Makes the code much bigger but otherwise it's hard to
	    tell why something fails.

no-net    - disables the mbed TLS OS networking module. Set this when building
	    for the "network over modem" library.


full-msgs - support full-sized TLS messages as defined in the RFC.
	    (by default we know that the largest OTT message is much smaller).

no-hwrng -  Disable using the device hardware random number generator.
            Set this to use the Linux/OSX /dev/random sources instead.

heap-prof - Use a custom allocator to record maximum heap used.

To build the mbedtls_test program to run on OSX (i.e. by setting
BUILD_TARGET = osx in mbedtls_test/Makefile), you need to configure the library
as:

	./vz_configure_mbedtls full-msgs no-hwrng


Configuring device credentials
-------------------------------
After creating an account using thingspace-client-api.sh script (see Section 4),
create an OTT device. This will retrieve a device ID and device secret. These
two are collectively termed device credentials and are used to authenticate the
device when it tries to communicate with Thingspace. Before building the SDK and
accompanying examples, the user must use the 'C compatible' forms of the device
credentials to populate the corresponding entries in:
ts_sdk/sdk/cloud_comm/inc/dev_creds/dev_creds.h


5.1.2 SMSNAS protocol
----------------------
No additional configuration is needed to build the TS SDK for the SMSNAS protocol.


5.2 Building the SDK with the user application
-----------------------------------------------
For user applications that are small / have a simple build process, the SDK can
be built with the application source. The actual build takes place inside a
Docker container started by the build script (docker_build.sh) located at:
ts_sdk/tools/scripts/. It can be invoked from the repository root.

The script takes in two Dockerfiles as parameters, one describing the build
environment (ts_sdk/tools/docker/Dockerfile.dockerhub) and the second one for
the project's source and build flags (Eg. ts_sdk/apps/Dockerfile).
Additionally, it is possible to configure the protocol the SDK should be built
for. For more information about the usage of the script, execute it without any
parameters.

Refer to Section 6 for the steps to create an application that can be built with
this approach.


5.3 Building the SDK into a static library
-------------------------------------------
This build target is a work in progress. The purpose of this build target is to
allow the application to use the TS SDK without imposing restrictions on the
user's source tree and build process.

When fully implemented, the user will be able to build the SDK for a specific
protocol, transport, modem and target MCU & board into a static library. The
generated binary blob can then be moved to the user application source tree.
The static library is linked to the application in the final steps of the user's
build process.


6. Creating a new user application
-----------------------------------
All user applications that are built along with the SDK should reside in
ts_sdk/apps. They are expected to roughly have the following directory layout:

apps/
|
+- Dockerfile
+- common.mk
+- rules.mk
+- <app_name>/
  |
  +- Makefile
  +- inc/<header files>
  +- src/<source files>

To create a new application, simply copy the template provided in
ts_sdk/apps/basic_template to the application's directory (<app_name> in the
above layout).

The Makefile can be modified to specify the board (BUILD_BOARD), MCU (BUILD_MCU)
and chipset family (BUILD_TARGET). It can also be used to specify the protocol
to be used (PROTOCOL) and in the future, to specify the modem. Acceptable values
for the above parameters are as follows:
	o BUILD_BOARD  : nucleo
	o BUILD_TARGET : stm32f4
	o BUILD_MCU    : stm32f429
	o PROTOCOL     : OTT_PROTOCOL, SMSNAS_PROTOCOL

For an example on using the SDK, refer to: ts_sdk/apps/cc_test
Use the following command to build the user application (assuming current
location is repository root):
./tools/scripts/docker_build.sh ./tools/docker/Dockerfile.dockerhub \
./apps/Dockerfile PROTO=OTT_PROTOCOL APP=<app_name>


7. Generating documentation
----------------------------
TS SDK relies on Doxygen to generate documentation from its source files. There
are two sets of documentations that can be generated: for the SDK itself and for
the hardware abstraction layer (HAL) used to keep it platform agnostic.

A Makefile located in ts_sdk/Documents/doxygen/ simplifies the generation
process. Following are the commands supported by it:

Command			Description
--------------		-----------------------------------------------
make all		Generate documentation for both the SDK and HAL
make sdk-docs		Generate documentation for the SDK
make hal-docs		Generate documentation for the HAL
make clean		Remove all generated documentation

All documentation is generated in ts_sdk/Documents/doxygen/build
